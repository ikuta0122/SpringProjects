<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- 数据库配置信息 -->
	<context:property-placeholder location="classpath:jdbc.properties"/>

	<!--声明数据源DataSource -->
	<bean id="myDataSource"
		  class="com.alibaba.druid.pool.DruidDataSource" init-method="init"
		  destroy-method="close">
		<!-- 使用属性配置文件中的数据 -->
		<property name="url" value="${jdbc.url}"/>
		<property name="username" value="${jdbc.username}"/>
		<property name="password" value="${jdbc.password}"/>
		<property name="maxActive" value="${jdbc.max}"/>
	</bean>

	<!--声明SqlSessionFactory -->
	<bean id="sqlSessionFactory"
		  class="org.mybatis.spring.SqlSessionFactoryBean">
		<!--set注入，把数据库连接池付给了dataSource属性 -->
		<property name="dataSource" ref="myDataSource"/>
		<!--mybatis主配置文件的位置 -->
		<property name="configLocation" value="classpath:mybatis.xml"/>
	</bean>

	<!--声明Dao对象,使用SqlSession的getMapper(StudentDao.class) MapperScannerConfigurer在内部调用getMapper()生成每个dao接口的代理对象 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!--指定SqlSessionFactory对象的id -->
		<property name="sqlSessionFactoryBeanName"
				  value="sqlSessionFactory"/>
		<!--指定包名[dao接口所在的包名] MapperScannerConfigurer会扫描这个包中的所有接口 把每个接口都执行一次getMapper()方法,得到每个接口的dao对象 
			创建好的dao对象放入到spring的容器中 注意:dao对象的默认名称是 接口名首字母小写 -->
		<property name="basePackage" value="com.ikuta.dao"/>
	</bean>

	<!--声明service -->
	<bean id="buyService"
		  class="com.ikuta.service.impl.BuyGoodsServiceImpl">
		<property name="goodsDao" ref="goodsDao"/>
		<property name="saleDao" ref="saleDao"/>
	</bean>
</beans>